diff -ru a/libavcodec/avcodec.h ./libavcodec/avcodec.h
--- a/libavcodec/avcodec.h	2015-04-12 19:35:07.000000000 +0200
+++ b/libavcodec/avcodec.h	2015-04-26 14:31:11.357450575 +0200
@@ -292,6 +292,10 @@
     AV_CODEC_ID_MVC2_DEPRECATED,
     AV_CODEC_ID_HQX,
 
+    /* H264 MVC type */
+    AV_CODEC_ID_H264MVC    = MKBETAG('M','V','C','C'),
+
+
     AV_CODEC_ID_BRENDER_PIX= MKBETAG('B','P','I','X'),
     AV_CODEC_ID_Y41P       = MKBETAG('Y','4','1','P'),
     AV_CODEC_ID_ESCAPE130  = MKBETAG('E','1','3','0'),
diff -ru a/libavcodec/h264.c ./libavcodec/h264.c
--- a/libavcodec/h264.c	2015-04-12 19:35:07.000000000 +0200
+++ b/libavcodec/h264.c	2015-04-26 16:08:09.305662014 +0200
@@ -1668,6 +1668,12 @@
             case NAL_SPS_EXT:
             case NAL_AUXILIARY_SLICE:
                 break;
+            case NAL_14:
+            case NAL_15:
+            case NAL_20:
+                av_log(avctx, AV_LOG_ERROR, "NAL type: %d for MVC\n", hx->nal_unit_type);
+                avctx->codec_tag = AV_CODEC_ID_H264MVC;
+                break;                  
             case NAL_FF_IGNORE:
                 break;
             default:
diff -ru a/libavcodec/h264.h ./libavcodec/h264.h
--- a/libavcodec/h264.h	2015-04-12 19:35:07.000000000 +0200
+++ b/libavcodec/h264.h	2015-04-26 15:52:39.777628233 +0200
@@ -122,7 +122,10 @@
     NAL_END_STREAM      = 11,
     NAL_FILLER_DATA     = 12,
     NAL_SPS_EXT         = 13,
+    NAL_14              = 14,
+    NAL_15              = 15,
     NAL_AUXILIARY_SLICE = 19,
+    NAL_20              = 20,
     NAL_FF_IGNORE       = 0xff0f001,
 };
 
diff -ru a/libavformat/mov.c ./libavformat/mov.c
--- a/libavformat/mov.c	2015-04-12 19:35:07.000000000 +0200
+++ b/libavformat/mov.c	2015-04-26 14:35:54.697460872 +0200
@@ -1310,6 +1310,43 @@
     return 0;
 }
 
+static int mov_read_mvcc(MOVContext *c, AVIOContext *pb, MOVAtom atom)
+{
+/*
+    int extradata_size;
+    int ret, i;
+    uint32_t n;
+    AVStream *st;
+
+    if (c->fc->nb_streams < 1)
+        return 0;
+    st = c->fc->streams[c->fc->nb_streams-1];
+    extradata_size = st->codec->extradata_size;
+
+    if ((uint64_t)atom.size > (1<<30))
+        return AVERROR_INVALIDDATA;
+
+    if (extradata_size == 0)
+        return 0;
+    if ((ret = mov_read_extradata(c, pb, atom, AV_CODEC_ID_H264)) < 0)
+        return ret;
+    for (i = 0, n = 0; i < 4; i++)
+        n = (n << 8) | st->codec->extradata[extradata_size+i];
+    n -= 4;
+    for (i = 0; i < 4; i++)
+        st->codec->extradata[extradata_size+i] = (n >> ((3 - i) << 3)) & 0xff;
+    return 0;
+*/
+    AVStream *st;
+
+    if (c->fc->nb_streams < 1)
+        return 0;
+    st = c->fc->streams[c->fc->nb_streams-1];
+    st->codec->codec_tag = AV_CODEC_ID_H264MVC;
+
+    return mov_read_glbl(c, pb, atom);
+}
+
 static int mov_read_dvc1(MOVContext *c, AVIOContext *pb, MOVAtom atom)
 {
     AVStream *st;
@@ -3522,6 +3559,7 @@
 { MKTAG('C','i','n', 0x8e), mov_read_targa_y216 },
 { MKTAG('f','r','e','e'), mov_read_free },
 { MKTAG('-','-','-','-'), mov_read_custom },
+{ MKTAG('m','v','c','C'), mov_read_mvcc },
 { 0, NULL }
 };
 
