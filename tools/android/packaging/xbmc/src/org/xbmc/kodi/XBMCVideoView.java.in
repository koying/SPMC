package @APP_PACKAGE@;

import javax.microedition.khronos.egl.EGL10;
import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.egl.EGLContext;
import javax.microedition.khronos.egl.EGLDisplay;
import javax.microedition.khronos.egl.EGLSurface;

import android.graphics.PixelFormat;
import android.graphics.Rect;
import android.opengl.GLES20;
import android.util.AttributeSet;
import android.util.Log;
import android.view.Surface;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.content.Context;
import android.view.View;
import android.widget.RelativeLayout;

public class XBMCVideoView extends SurfaceView implements
    SurfaceHolder.Callback
{
  native void _OnSurfaceChanged(SurfaceHolder holder, int format, int width, int height);
  native void _OnSurfaceCreated(SurfaceHolder holder);
  native void _OnSurfaceDestroyed(SurfaceHolder holder);

  private static final String TAG = "XBMCVideoPlayView";

  public boolean mHasHolder = false;
  public int mWidth = -1;
  public int mHeight = -1;
  private RelativeLayout mVideoLayout = null;

  public static XBMCVideoView createVideoView()
  {
    return new XBMCVideoView(Main.MainActivity);
  }

  public XBMCVideoView(Context context)
  {
    super(context);
    getHolder().addCallback(this);
    getHolder().setFormat(PixelFormat.TRANSPARENT);
    mVideoLayout = (RelativeLayout) findViewById(R.id.VideoLayout);
  }

  public void add()
  {
    mVideoLayout.addView(this);
  }

  public void release()
  {
    mVideoLayout.removeView(this);
  }

  /**
   * Clears the playback surface to black.
   */
  public void clearSurface()
  {
    if (!mHasHolder)
      return;

    Main.MainActivity.runOnUiThread(new Runnable()
    {
      @Override
      public void run()
      {
        try
        {
          // Have to go EGL to allow reuse of surface

          final int EGL_OPENGL_ES2_BIT = 4;
          final int EGL_CONTEXT_CLIENT_VERSION = 0x3098;

          EGL10 egl = (EGL10) EGLContext.getEGL();
          EGLDisplay display = egl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
          egl.eglInitialize(display, null);

          int[] attribList =
                  { EGL10.EGL_RED_SIZE, 8, EGL10.EGL_GREEN_SIZE, 8, EGL10.EGL_BLUE_SIZE, 8,
                          EGL10.EGL_ALPHA_SIZE, 8, EGL10.EGL_RENDERABLE_TYPE,
                          EGL_OPENGL_ES2_BIT, EGL10.EGL_NONE, 0, // placeholder for
                          // recordable [@-3]
                          EGL10.EGL_NONE };
          EGLConfig[] configs = new EGLConfig[1];
          int[] numConfigs = new int[1];
          egl.eglChooseConfig(display, attribList, configs, configs.length,
                  numConfigs);
          EGLConfig config = configs[0];
          EGLContext context = egl.eglCreateContext(display, config,
                  EGL10.EGL_NO_CONTEXT, new int[]
                          { EGL_CONTEXT_CLIENT_VERSION, 2, EGL10.EGL_NONE });
          EGLSurface eglSurface = egl.eglCreateWindowSurface(display, config,
                  this, new int[]
                          { EGL10.EGL_NONE });

          egl.eglMakeCurrent(display, eglSurface, eglSurface, context);
          GLES20.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
          GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
          egl.eglSwapBuffers(display, eglSurface);
          egl.eglDestroySurface(display, eglSurface);
          egl.eglMakeCurrent(display, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_SURFACE,
                  EGL10.EGL_NO_CONTEXT);
          egl.eglDestroyContext(display, context);
          egl.eglTerminate(display);
        }
        catch (Exception e) {}
      }
    });
  }

  public Surface getSurface()
  {
    if (!mHasHolder)
    {
      return null;
    } else
    {
      Log.d(TAG, "getSurface() = " + getHolder().getSurface());
      return getHolder().getSurface();
    }
  }

  public Rect getSurfaceRect()
  {
    Rect ret = new Rect();
    ret.top = 0;
    ret.left = 0;
    ret.right = mWidth;
    ret.bottom = mHeight;

    return ret;
  }

  public void setSurfaceRect(final int left, final int top, final int right, final int bottom)
  {
    Main.MainActivity.runOnUiThread(new Runnable()
    {
      @Override
      public void run()
      {
        try
        {
          RelativeLayout.LayoutParams mp = new RelativeLayout.LayoutParams(getLayoutParams());
          final RelativeLayout layout = (RelativeLayout) findViewById(R.id.VideoLayout);
          mp.setMargins(left, top, layout.getWidth() - right, layout.getHeight() - bottom);
          setLayoutParams(mp);
          requestLayout();
        }
        catch (Exception e) {}
      }
    });
  }


  @Override
  public void surfaceCreated(SurfaceHolder holder)
  {
    if (holder != getHolder())
      return;

    View v = getRootView();
    mWidth = v.getWidth();
    mHeight = v.getHeight();

    Log.d(TAG, "Created");
    mHasHolder = true;
    _OnSurfaceCreated(holder);
  }

  @Override
  public void surfaceChanged(SurfaceHolder holder, int format, int width,
      int height)
  {
    if (holder != getHolder())
      return;

    View v = getRootView();
    mWidth = v.getWidth();
    mHeight = v.getHeight();
    
    _OnSurfaceChanged(holder, format, mWidth, mHeight);

    Log.d(TAG, "Changed, format:" + format + ", width:" + width
        + ", height:" + height);
  }

  @Override
  public void surfaceDestroyed(SurfaceHolder holder)
  {
    if (holder != getHolder())
      return;

    Log.d(TAG, "Destroyed");
    mHasHolder = false;
    _OnSurfaceDestroyed(holder);
  }
}
