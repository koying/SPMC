package @APP_PACKAGE@;

import android.app.AlertDialog;
import android.app.NativeActivity;
import android.app.ProgressDialog;
import android.content.ComponentName;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.PixelFormat;
import android.graphics.Rect;
import android.media.AudioDeviceCallback;
import android.media.AudioDeviceInfo;
import android.media.AudioManager;
import android.media.Image;
import android.media.projection.MediaProjection;
import android.media.projection.MediaProjectionManager;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.text.Html;
import android.util.Log;
import android.view.Choreographer;
import android.view.Gravity;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.RelativeLayout;
import android.widget.TextView;

import java.text.MessageFormat;

public class Main extends NativeActivity implements Choreographer.FrameCallback
{
  private static final String TAG = "@APP_NAME_UC@";
  private static final int INTENT_RESULT_PROJECT_CODE = 4658;

  public static Main MainActivity = null;

  private XBMCSettingsContentObserver mSettingsContentObserver;
  private XBMCJsonRPC mJsonRPC = null;
  private XBMCProjection mCaptureProjection = null;
  private XBMCProjection mScreenshotProjection = null;
  private View thisView = null;
  private Handler handler = new Handler();
  private Intent mNewIntent = null;
  private int mNewIntentDelay = 0;
  private MediaProjection mMediaProjection;
  private int mProjectionIntentId = 0;

  native void _onNewIntent(Intent intent);
  native void _onActivityResult(int requestCode, int resultCode, Intent resultData);
  native void _doFrame(long frameTimeNanos);
  native void _onAudioDeviceAdded(AudioDeviceInfo[] addedDevices);
  native void _onAudioDeviceRemoved(AudioDeviceInfo[] removedDevices);
  native void _onCaptureAvailable(Image img);
  native void _onScreenshotAvailable(Image img);

  private class MyAudioDeviceCallback extends AudioDeviceCallback
  {
    public void onAudioDevicesAdded(AudioDeviceInfo[] addedDevices)
    {
      if (addedDevices.length != 0)
        _onAudioDeviceAdded(addedDevices);
    }

    public void onAudioDevicesRemoved(AudioDeviceInfo[] removedDevices)
    {
      if (removedDevices.length != 0)
        _onAudioDeviceRemoved(removedDevices);
    }
  }

  private Runnable leanbackUpdateRunnable = new Runnable()
  {
    @Override
    public void run()
    {
      Log.d(TAG, "Updating recommendations");
      new Thread()
      {
        public void run()
        {
          mJsonRPC.updateLeanback(Main.this);
        }
      }.start();
      handler.postDelayed(this, 60*60*1000);
    }
  };

  /** A signal handler in native code has been triggered. As our last gasp,
   * launch the crash handler (in its own process), because when we return
   * from this function the process will soon exit. */
  void startCrashHandler()
  {
    Log.i("Main", "Launching crash handler");
    startActivity(new Intent(this, XBMCCrashHandler.class));
  }

  void uploadLog()
  {
    Log.i("Main", "Uploading log");

    runOnUiThread(new Runnable()
    {
      @Override
      public void run()
      {
        final ProgressDialog progress = new ProgressDialog(Main.this);
        progress.setMessage(getString(R.string.pushing_log));
        progress.setIndeterminate(true);
        progress.setCancelable(false);
        progress.show();
        final AsyncTask task = new AsyncTask<Void, String, String>()
        {
          @Override
          protected String doInBackground(Void... v)
          {
            return XBMCCrashHandler.postLog(Main.this, false);
          }

          @Override
          protected void onProgressUpdate(String... sProgress)
          {
            progress.setMessage(sProgress[0]);
          }

          @Override
          protected void onPostExecute(String id)
          {
            progress.dismiss();
            if (!id.isEmpty())
            {
              AlertDialog.Builder builder = new AlertDialog.Builder(Main.this)
                  .setMessage(Html.fromHtml(MessageFormat.format(getString(R.string.push_log_success), id, getString(R.string.sticky_url) + "/" + id)))
                  .setCancelable(true)
                  .setIcon(android.R.drawable.ic_dialog_info)
                  .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener()
                  {
                    @Override
                    public void onClick(DialogInterface dialog, int which)
                    {
                      dialog.dismiss();
                    }
                  });

              AlertDialog dialog = builder.show();

              TextView messageView = (TextView) dialog.findViewById(android.R.id.message);
              messageView.setGravity(Gravity.CENTER);
            } else
            {
              new AlertDialog.Builder(Main.this)
                  .setMessage(MessageFormat.format(getString(R.string.get_log_failed), getString(R.string.crash_email)))
                  .setCancelable(true)
                  .setIcon(android.R.drawable.ic_dialog_alert)
                  .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener()
                  {
                    @Override
                    public void onClick(DialogInterface dialog, int which)
                    {
                      dialog.dismiss();
                    }
                  })
                  .show();
            }
          }
        }.execute();
      }
    });
  }

  public Main()
  {
    super();
    MainActivity = this;
  }

  public Rect getDisplayRect()
  {
    Rect ret = new Rect();
    ret.top = 0;
    ret.left = 0;
    ret.right = 0;
    ret.bottom = 0;

    try
    {
      ret.right = thisView.getRootView().getWidth();
      ret.bottom = thisView.getRootView().getHeight();
    }
    catch (Exception e) {}

    return ret;
  }

  public void registerMediaButtonEventReceiver()
  {
    AudioManager manager = (AudioManager) getSystemService(AUDIO_SERVICE);
    manager.registerMediaButtonEventReceiver(new ComponentName(getPackageName(), XBMCBroadcastReceiver.class.getName()));
  }

  public void unregisterMediaButtonEventReceiver()
  {
    AudioManager manager = (AudioManager) getSystemService(AUDIO_SERVICE);
    manager.unregisterMediaButtonEventReceiver(new ComponentName(getPackageName(), XBMCBroadcastReceiver.class.getName()));
  }

  public void screenOn()
  {
    Window window = getWindow();
    window.addFlags(WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  }

  public void takeScreenshot()
  {
    if (mMediaProjection == null)
      return;
    mScreenshotProjection.takeScreenshot();
  }

  public void startProjection()
  {
    final MediaProjectionManager projectionManager = (MediaProjectionManager) getSystemService(MEDIA_PROJECTION_SERVICE);
    startActivityForResult(projectionManager.createScreenCaptureIntent(), INTENT_RESULT_PROJECT_CODE);
    mProjectionIntentId = INTENT_RESULT_PROJECT_CODE;
  }

  public void Initialize(int resultCode, Intent resultData)
  {
    final MediaProjectionManager projectionManager = (MediaProjectionManager) getSystemService(MEDIA_PROJECTION_SERVICE);
    mMediaProjection = projectionManager.getMediaProjection(resultCode, resultData);
    mCaptureProjection = new XBMCProjection(this, mMediaProjection);
    mScreenshotProjection = new XBMCProjection(this, mMediaProjection);
  }

  public void startCapture(int width, int height)
  {
    if (mMediaProjection == null)
      return;
    mCaptureProjection.startCapture(width, height);
  }

  public void stopCapture()
  {
    mCaptureProjection.stopCapture();
  }

  @Override
  public void onCreate(Bundle savedInstanceState)
  {
    System.loadLibrary("@APP_NAME_LC@");

    super.onCreate(savedInstanceState);
    getWindow().setFormat(PixelFormat.TRANSPARENT);

    setContentView(R.layout.activity_main);
    setVolumeControlStream(AudioManager.STREAM_MUSIC);

    mSettingsContentObserver = new XBMCSettingsContentObserver(this, handler);
    getApplicationContext().getContentResolver().registerContentObserver(android.provider.Settings.System.CONTENT_URI, true, mSettingsContentObserver );

    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
      AudioManager audioManager = (AudioManager)getSystemService(AUDIO_SERVICE);
      audioManager.registerAudioDeviceCallback(new MyAudioDeviceCallback(), null);
    }
    mJsonRPC = new XBMCJsonRPC();

    // Delayed Intent
    if (getIntent().getData() != null)
    {
      mNewIntent = new Intent(getIntent());
      mNewIntentDelay = 5000;
      getIntent().setData(null);
    }

    thisView = getWindow().getDecorView();
    thisView.setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener()
          {
            @Override
            public void onSystemUiVisibilityChange(int visibility)
            {
              if ((visibility & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) == 0)
              {
                handler.post(new Runnable()
                {
                  public void run()
                  {
                    if (android.os.Build.VERSION.SDK_INT >= 19) {
                      // Immersive mode

                      // Constants from API > 17
                      final int API_SYSTEM_UI_FLAG_IMMERSIVE_STICKY = 0x00001000;

                      thisView.setSystemUiVisibility(
                                View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                              | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                              | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                              | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                              | View.SYSTEM_UI_FLAG_FULLSCREEN
                              | API_SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
                    }
                  }
                });
              }
            }
          });
  }

  @Override
  protected void onNewIntent(Intent intent)
  {
    super.onNewIntent(intent);
    // Delay until after Resume
    mNewIntent = intent;
    mNewIntentDelay = 500;
  }

  @Override
  public void onStart()
  {
    super.onStart();
    getWindow().setFormat(PixelFormat.TRANSPARENT);

    Choreographer.getInstance().removeFrameCallback(this);
    Choreographer.getInstance().postFrameCallback(this);
  }

  @Override
  public void onResume()
  {
    super.onResume();

    Window window = getWindow();
    window.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

    if (android.os.Build.VERSION.SDK_INT >= 19) {
      // Immersive mode

      // Constants from API > 17
      final int API_SYSTEM_UI_FLAG_IMMERSIVE_STICKY = 0x00001000;

      thisView.setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_LAYOUT_STABLE
              | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
              | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
              | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
              | View.SYSTEM_UI_FLAG_FULLSCREEN
              | API_SYSTEM_UI_FLAG_IMMERSIVE_STICKY);


      if (getPackageManager().hasSystemFeature("android.software.leanback"))
      {
        // Leanback
        handler.removeCallbacks(leanbackUpdateRunnable);
        handler.postDelayed(leanbackUpdateRunnable, 10*1000);
      }
    }

    // New intent ?
    if (mNewIntent != null)
    {
      handler.postDelayed(new Runnable()
        {
          @Override
          public void run()
          {
            try {
              _onNewIntent(mNewIntent);
            } catch (UnsatisfiedLinkError e) {
              Log.e("Main", "Native not registered");
            } finally {
              mNewIntent = null;
            }
          }
        }, mNewIntentDelay);
    }
  }

  @Override
  public void onPause()
  {
    super.onPause();
  }

  @Override
  public void onActivityResult(int requestCode, int resultCode,
      Intent resultData)
  {
    if (requestCode == mProjectionIntentId)
    {
      if (resultCode == RESULT_OK)
        Initialize(resultCode, resultData);
      return;
    }

    _onActivityResult(requestCode, resultCode, resultData);
  }

  @Override
  public void onDestroy()
  {
    getApplicationContext().getContentResolver().unregisterContentObserver(mSettingsContentObserver);
    handler.removeCallbacks(leanbackUpdateRunnable);

    new Thread() {
      public void run()
      {
        try
        {
          sleep(5000);
          android.os.Process.killProcess(android.os.Process.myPid());
        } catch (Exception e) {}
      }
    }.start();
    super.onDestroy();
  }

  @Override
  public void doFrame(long frameTimeNanos)
  {
    Choreographer.getInstance().postFrameCallback(this);
    _doFrame(frameTimeNanos);
  }

  private native void _callNative(long funcAddr, long variantAddr);

  private void runNativeOnUiThread(final long funcAddr, final long variantAddr)
  {
    runOnUiThread(new Runnable()
    {
      @Override
      public void run()
      {
        _callNative(funcAddr, variantAddr);
      }
    });
  }
}
